{"ast":null,"code":"import mockData from \"../mock-data.json\";\nconst TRANSACTIONS_PER_PAGE = 5;\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page\n  } = _ref;\n  console.log(\"page: \" + page);\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const end = start + TRANSACTIONS_PER_PAGE;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end)\n  };\n};\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId\n  } = _ref2;\n  console.log(employeeId + \": employee ID\");\n\n  if (!employeeId) {\n    getTransactionsPaginated({\n      page: 1\n    });\n  }\n\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport const setTransactionApproval = _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  const transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n  console.log(\"this is transaction: \", transaction); //REMOVE\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  transaction.approved = value;\n};","map":{"version":3,"names":["mockData","TRANSACTIONS_PER_PAGE","data","employees","transactions","getEmployees","getTransactionsPaginated","page","console","log","Error","start","end","length","nextPage","slice","getTransactionsByEmployee","employeeId","filter","transaction","employee","id","setTransactionApproval","transactionId","value","find","currentTransaction","approved"],"sources":["/Users/brandonlu/Downloads/ramp-fe-challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\n\nconst TRANSACTIONS_PER_PAGE = 5\n\nconst data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  page,\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  console.log(\"page: \"+ page)\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE\n  const end = start + TRANSACTIONS_PER_PAGE\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end),\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  console.log(employeeId + \": employee ID\")\n  if (!employeeId) {\n    getTransactionsPaginated({page: 1})\n  }\n\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n}\n\nexport const setTransactionApproval = ({ transactionId, value }: SetTransactionApprovalParams): void => {\n  const transaction = data.transactions.find(\n    (currentTransaction) => currentTransaction.id === transactionId\n  )\n    console.log(\"this is transaction: \", transaction) //REMOVE\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\")\n  }\n\n  transaction.approved = value\n}\n"],"mappings":"AAQA,OAAOA,QAAP,MAAqB,mBAArB;AAEA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA,MAAMC,IAA4D,GAAG;EACnEC,SAAS,EAAEH,QAAQ,CAACG,SAD+C;EAEnEC,YAAY,EAAEJ,QAAQ,CAACI;AAF4C,CAArE;AAKA,OAAO,MAAMC,YAAY,GAAG,MAAkBH,IAAI,CAACC,SAA5C;AAEP,OAAO,MAAMG,wBAAwB,GAAG,QAEwB;EAAA,IAFvB;IACvCC;EADuC,CAEuB;EAC9DC,OAAO,CAACC,GAAR,CAAY,WAAUF,IAAtB;;EACA,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIG,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAGJ,IAAI,GAAGN,qBAArB;EACA,MAAMW,GAAG,GAAGD,KAAK,GAAGV,qBAApB;;EAEA,IAAIU,KAAK,GAAGT,IAAI,CAACE,YAAL,CAAkBS,MAA9B,EAAsC;IACpC,MAAM,IAAIH,KAAJ,CAAW,gBAAeH,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMO,QAAQ,GAAGF,GAAG,GAAGV,IAAI,CAACE,YAAL,CAAkBS,MAAxB,GAAiCN,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EAEA,OAAO;IACLO,QADK;IAELZ,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBW,KAAlB,CAAwBJ,KAAxB,EAA+BC,GAA/B;EAFD,CAAP;AAID,CArBM;AAuBP,OAAO,MAAMI,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;EACpFT,OAAO,CAACC,GAAR,CAAYQ,UAAU,GAAG,eAAzB;;EACA,IAAI,CAACA,UAAL,EAAiB;IACfX,wBAAwB,CAAC;MAACC,IAAI,EAAE;IAAP,CAAD,CAAxB;EACD;;EAED,OAAOL,IAAI,CAACE,YAAL,CAAkBc,MAAlB,CAA0BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BJ,UAAtE,CAAP;AACD,CAPM;AASP,OAAO,MAAMK,sBAAsB,GAAG,SAAkE;EAAA,IAAjE;IAAEC,aAAF;IAAiBC;EAAjB,CAAiE;EACtG,MAAML,WAAW,GAAGjB,IAAI,CAACE,YAAL,CAAkBqB,IAAlB,CACjBC,kBAAD,IAAwBA,kBAAkB,CAACL,EAAnB,KAA0BE,aADhC,CAApB;EAGEf,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCU,WAArC,EAJoG,CAIlD;;EACpD,IAAI,CAACA,WAAL,EAAkB;IAChB,MAAM,IAAIT,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAEDS,WAAW,CAACQ,QAAZ,GAAuBH,KAAvB;AACD,CAVM"},"metadata":{},"sourceType":"module"}